/*
Copyright(c) 2011 Sencha
*/
/*
 * File: app/model/Config.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.model.Config', {
    extend: 'Ext.data.Model',
    config: {
        fields: [
            {
                allowNull: false,
                name: 'scale',
                type: 'int'
            },
            {
                allowNull: false,
                name: 'language',
                type: 'int'
            },
            {
                defaultValue: 0,
                name: 'value',
                type: 'int'
            }
        ]
    }
});
/*
 * File: app/model/Language.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.model.Language', {
    extend: 'Ext.data.Model',
    config: {
        fields: [
            {
                allowNull: false,
                name: 'idLang',
                type: 'int'
            },
            {
                name: 'label',
                type: 'string'
            }
        ]
    }
});
/*
 * File: app/controller/ConfigController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.controller.ConfigController', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Config'
        ],
        stores: [
            'ConfigStore'
        ],
        views: [
            'ConfigPanel'
        ],
        refs: {
            okConfig: '#okConfig',
            ValueView: 'Value',
            mainContainer: '#MainContainer',
            scaleSel: '#ScaleSel'
        },

        control: {
            "ConfigPanel": {
                activate: 'onConfigPanelActivate'
            },
            "okConfig": {
                tap: 'onConfigTap'
            }
        }
    },

    onConfigTap: function(button, e, options) {
        var me = this;
        var scale = me.getScaleSel().getValue();
        me.getMainContainer().setActiveItem(scale);
    },

    onConfigPanelActivate: function(container, newActiveItem, oldActiveItem, options) {
        var me = this;

        var view = me.getValueView();
        view.refresh();
    }

});
/*
 * File: app/controller/NRS11Panel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.controller.NRS11Panel', {
    extend: 'Ext.app.Controller',

    config: {
        stores: [
            'ConfigStore'
        ],
        views: [
            'NRS11Panel'
        ],
        refs: {
            numContainer: '#NRSCarousel container',
            nrsNav: '#NRSNavContainer',
            infoBtn2: '#infoBtn2',
            mainContainer: '#MainContainer',
            NRS11Panel: '#Nrs11Panel',
            NRSCarousel: '#NRSCarousel'
        },

        control: {
            "numContainer": {
                activate: 'numActivate'
            },
            "infoBtn2": {
                tap: 'onInfoButtonTap'
            },
            "NRS11Panel": {
                activate: 'onNRS11PanelActivate'
            }
        }
    },

    numActivate: function(container, newActiveItem, oldActiveItem, options) {
        if (!Ext.isEmpty(oldActiveItem)) {
            var oldIndex = oldActiveItem.config.value;
            var oldFace = this.getNrsNav().items.getAt(oldIndex);

            oldFace.removeCls("face-selected");
        }

        if (!Ext.isEmpty(container)) {
            var newIndex = container.config.value;
            var newFace    = this.getNrsNav().items.getAt(newIndex);

            newFace.addCls("face-selected");
        }

        /* guardar valor al model */
        /* guardar model al disc */;
    },

    onInfoButtonTap: function(button, e, options) {
        var me = this;
        me.getMainContainer().setActiveItem(4);
    },

    onNRS11PanelActivate: function(container, newActiveItem, oldActiveItem, options) {
        var storeConfig = Ext.getStore("configStoreId");
        var dataStore   = storeConfig.getData();
        var configModel = dataStore.getAt(0);

        var value = configModel.get("value");

        var pan = this.getNRSCarousel();

        pan.setActiveItem(value);
    }

});
/*
 * File: app/controller/FPSRPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.controller.FPSRPanel', {
    extend: 'Ext.app.Controller',

    config: {
        views: [
            'FPSRPanel'
        ],
        refs: {
            faceContainer: '#FPSCarousel image',
            fpsNav: '#FPSNavContainer',
            infoBtn: '#infoBtn',
            mainContainer: '#MainContainer'
        },

        control: {
            "faceContainer": {
                activate: 'faceActivate'
            },
            "infoBtn": {
                tap: 'onInfoButtonTap'
            }
        }
    },

    faceActivate: function(container, newActiveItem, oldActiveItem, options) {
        if (!Ext.isEmpty(oldActiveItem)) {
            var oldIndex = oldActiveItem.config.value / 2;
            var oldFace = this.getFpsNav().items.getAt(oldIndex);

            oldFace.removeCls("face-selected");
        }

        if (!Ext.isEmpty(container)) {
            var newIndex = container.config.value / 2;
            var newFace    = this.getFpsNav().items.getAt(newIndex);

            newFace.addCls("face-selected");
        }

        /* guardar valor al model */
        /* guardar model al disc */;
    },

    onInfoButtonTap: function(button, e, options) {
        var me = this;
        me.getMainContainer().setActiveItem(4);
    }

});
/*
 * File: app/view/ui/VASPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.view.ui.VASPanel', {
    extend: 'Ext.Container',

    config: {
        html: 'VASPanel under construction'
    }

});
/*
 * File: app/view/ui/ConfigPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.view.ui.ConfigPanel', {
    extend: 'Ext.form.Panel',

    config: {
        id: 'ConfigPanel',
        layout: {
            type: 'vbox'
        },
        scrollable: false,
        items: [
            {
                xtype: 'titlebar',
                docked: 'top',
                title: 'Painometer',
                items: [
                    {
                        xtype: 'button',
                        id: 'okConfig',
                        ui: 'confirm',
                        text: 'OK'
                    }
                ]
            },
            {
                xtype: 'panel',
                height: 183,
                id: 'ValueCont',
                layout: {
                    type: 'fit'
                },
                items: [
                    {
                        xtype: 'dataview',
                        centered: true,
                        height: 130,
                        id: 'Value',
                        style: 'border-width:0.1 px; border-style:solid;',
                        width: 130,
                        scrollable: false,
                        itemTpl: [
                            '<div style=" padding-top:-15px;',
                            'font-size:100px;"><center>{value}</center></div>'
                        ],
                        store: 'configStoreId'
                    }
                ]
            },
            {
                xtype: 'fieldset',
                layout: {
                    type: 'default'
                },
                instructions: 'Opcions generals de l\'eina',
                title: 'Opcions',
                items: [
                    {
                        xtype: 'selectfield',
                        height: '',
                        id: 'ScaleSel',
                        itemId: 'ScaleSel',
                        width: '',
                        label: 'Escala',
                        labelAlign: 'bottom',
                        labelWidth: '40%',
                        name: 'escalaType',
                        displayField: 'label',
                        store: 'scaleTypesStoreId',
                        valueField: 'idScale'
                    },
                    {
                        xtype: 'selectfield',
                        height: '',
                        width: '',
                        label: 'Idioma',
                        labelAlign: 'bottom',
                        labelWidth: '40%',
                        name: 'Language',
                        displayField: 'label',
                        store: 'languageStoreId',
                        valueField: 'idLang\n'
                    }
                ]
            }
        ]
    }

});
/*
 * File: app/view/ui/FPSRPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.view.ui.FPSRPanel', {
    extend: 'Ext.form.Panel',

    config: {
        id: 'FPSRPanel',
        style: 'background-color:white;',
        layout: {
            type: 'fit'
        },
        scrollable: false,
        items: [
            {
                xtype: 'container',
                docked: 'top',
                id: 'FPSNavContainer',
                padding: 10,
                defaults: {
                    width: 50,
                    height: 68,
                    style: 'background-position: center center; background-size: 52px;'
                },
                layout: {
                    align: 'center',
                    pack: 'center',
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'image',
                        id: 'smallFace1',
                        src: 'resources/images/fpsr/cara1.png'
                    },
                    {
                        xtype: 'image',
                        id: 'smallFace2',
                        src: 'resources/images/fpsr/cara2.png'
                    },
                    {
                        xtype: 'image',
                        id: 'smallFace3',
                        src: 'resources/images/fpsr/cara3.png'
                    },
                    {
                        xtype: 'image',
                        id: 'smallFace4',
                        src: 'resources/images/fpsr/cara4.png'
                    },
                    {
                        xtype: 'image',
                        id: 'smallFace5',
                        src: 'resources/images/fpsr/cara5.png'
                    },
                    {
                        xtype: 'image',
                        id: 'smallFace6',
                        src: 'resources/images/fpsr/cara6.png'
                    }
                ]
            },
            {
                xtype: 'container',
                id: 'InfoCaroCont',
                defaults: {
                    style: 'background-color:white',
                    
                },
                layout: {
                    type: 'fit'
                },
                items: [
                    {
                        xtype: 'container',
                        docked: 'right',
                        id: 'infoContainer',
                        layout: {
                            align: 'end',
                            pack: 'end',
                            type: 'hbox'
                        },
                        items: [
                            {
                                xtype: 'button',
                                id: 'infoBtn',
                                style: 'border:0',
                                ui: 'info_btn-small',
                                width: 22,
                                iconCls: 'info',
                                iconMask: true
                            }
                        ]
                    },
                    {
                        xtype: 'carousel',
                        id: 'FPSCarousel',
                        defaults: {
                            style: 'background-position: 75% 0%; background-size: 285px;'
                        },
                        items: [
                            {
                                xtype: 'image',
                                id: 'face_1',
                                src: 'resources/images/fpsr/cara1.png',
                                value: 0
                            },
                            {
                                xtype: 'image',
                                id: 'face_2',
                                src: 'resources/images/fpsr/cara2.png',
                                value: 2
                            },
                            {
                                xtype: 'image',
                                id: 'face_3',
                                src: 'resources/images/fpsr/cara3.png',
                                value: 4
                            },
                            {
                                xtype: 'image',
                                id: 'face_4',
                                src: 'resources/images/fpsr/cara4.png',
                                value: 6
                            },
                            {
                                xtype: 'image',
                                id: 'face_5',
                                src: 'resources/images/fpsr/cara5.png',
                                value: 8
                            },
                            {
                                xtype: 'image',
                                id: 'face_6',
                                src: 'resources/images/fpsr/cara6.png',
                                value: 10
                            }
                        ]
                    }
                ]
            }
        ]
    }

});
/*
 * File: app/view/ui/NRS11Panel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.view.ui.NRS11Panel', {
    extend: 'Ext.form.Panel',

    config: {
        html: '',
        id: 'NRS11Panel',
        style: 'background-color:white;',
        layout: {
            type: 'fit'
        },
        scrollable: false,
        items: [
            {
                xtype: 'container',
                docked: 'top',
                id: 'NRSNavContainer',
                defaults: {
                    width: 29,
                    height: 20,
                    style: 'margin-top: 15px; text-align: center; background-position: center center; '
                },
                layout: {
                    pack: 'center',
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'container',
                        html: 0,
                        id: 'smallNRS0'
                    },
                    {
                        xtype: 'container',
                        html: 1,
                        id: 'smallNRS1'
                    },
                    {
                        xtype: 'container',
                        html: 2,
                        id: 'smallNRS2'
                    },
                    {
                        xtype: 'container',
                        html: 3,
                        id: 'smallNRS3'
                    },
                    {
                        xtype: 'container',
                        html: 4,
                        id: 'smallNRS4'
                    },
                    {
                        xtype: 'container',
                        html: 5,
                        id: 'smallNRS5'
                    },
                    {
                        xtype: 'container',
                        html: 6,
                        id: 'smallNRS6'
                    },
                    {
                        xtype: 'container',
                        html: 7,
                        id: 'smallNRS7'
                    },
                    {
                        xtype: 'container',
                        html: 8,
                        id: 'smallNRS8'
                    },
                    {
                        xtype: 'container',
                        html: 9,
                        id: 'smallNRS9'
                    },
                    {
                        xtype: 'container',
                        html: 10,
                        id: 'smallNRS10'
                    }
                ]
            },
            {
                xtype: 'container',
                id: 'InfoCaroCont2',
                style: 'background-color:white;',
                ui: '',
                defaults: {
                    style: 'background-color:white',
                    
                },
                layout: {
                    type: 'fit'
                },
                items: [
                    {
                        xtype: 'container',
                        docked: 'right',
                        id: 'infoContainer2',
                        layout: {
                            align: 'end',
                            pack: 'end',
                            type: 'hbox'
                        },
                        items: [
                            {
                                xtype: 'button',
                                id: 'infoBtn2',
                                style: 'border:0',
                                ui: 'info_btn-small',
                                width: 22,
                                iconCls: 'info',
                                iconMask: true
                            }
                        ]
                    },
                    {
                        xtype: 'carousel',
                        id: 'NRSCarousel',
                        style: 'background-color:white;',
                        defaults: {
                            style: 'width: 100%;height: 200px; position: absolute; top: 50%; margin-top: -100px; font-size: 200px; text-align: center;'
                        },
                        items: [
                            {
                                xtype: 'container',
                                html: 0,
                                id: 'NRS0',
                                value: 0
                            },
                            {
                                xtype: 'container',
                                html: 1,
                                id: 'NRS1',
                                value: 1
                            },
                            {
                                xtype: 'container',
                                html: 2,
                                id: 'NRS2',
                                value: 2
                            },
                            {
                                xtype: 'container',
                                html: 3,
                                id: 'NRS3',
                                value: 3
                            },
                            {
                                xtype: 'container',
                                html: 4,
                                id: 'NRS4',
                                value: 4
                            },
                            {
                                xtype: 'container',
                                html: 5,
                                id: 'NRS5',
                                value: 5
                            },
                            {
                                xtype: 'container',
                                html: 6,
                                id: 'NRS6',
                                value: 6
                            },
                            {
                                xtype: 'container',
                                html: 7,
                                id: 'NRS7',
                                value: 7
                            },
                            {
                                xtype: 'container',
                                html: 8,
                                id: 'NRS8',
                                value: 8
                            },
                            {
                                xtype: 'container',
                                html: 9,
                                id: 'NRS9',
                                value: 9
                            },
                            {
                                xtype: 'container',
                                html: 10,
                                id: 'NRS10',
                                style: 'padding-top: 100px; padding-left: 50px; font-size: 180px',
                                value: 10
                            }
                        ]
                    }
                ]
            }
        ]
    }

});
/*
 * File: app/store/base/languageStore.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.store.base.languageStore', {
    extend: 'Ext.data.Store',
    requires: [
        'Painometer.model.Language'
    ],

    config: {
        autoLoad: true,
        data: [
            {
                idLang: 0,
                label: 'Català'
            },
            {
                idLang: 1,
                label: 'Español'
            }
        ],
        model: 'Painometer.model.Language',
        storeId: 'languageStoreId'
    }
});
/*
 * File: app/store/base/ConfigStore.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.store.base.ConfigStore', {
    extend: 'Ext.data.Store',
    requires: [
        'Painometer.model.Config'
    ],

    config: {
        autoLoad: true,
        model: 'Painometer.model.Config',
        storeId: 'configStoreId',
        proxy: {
            type: 'localstorage',
            id: 'configStoreProxy'
        },
        listeners: [
            {
                fn: 'onStoreLoad',
                event: 'load'
            }
        ]
    }
});
/*
 * File: app/model/ScaleTypes.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.model.ScaleTypes', {
    extend: 'Ext.data.Model',
    config: {
        fields: [
            {
                allowNull: false,
                name: 'idScale',
                type: 'int'
            },
            {
                name: 'label',
                type: 'string'
            }
        ]
    }
});
/*
 * File: app/view/ui/CASPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.view.ui.CASPanel', {
    extend: 'Ext.Container',

    config: {
        html: 'CASPanel under construction'
    }

});
/*
 * File: app/view/VASPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.view.VASPanel', {
    extend: 'Painometer.view.ui.VASPanel',
    alias: 'widget.vaspanel',

    initialize: function() {
        var me = this;
        me.callParent(arguments);
    }

});
/*
 * File: app/view/NRS11Panel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.view.NRS11Panel', {
    extend: 'Painometer.view.ui.NRS11Panel',
    alias: 'widget.nrs11panel',

    initialize: function() {
        var me = this;
        me.callParent(arguments);
    }

});
/*
 * File: app/view/FPSRPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.view.FPSRPanel', {
    extend: 'Painometer.view.ui.FPSRPanel',
    alias: 'widget.fpsrpanel',

    initialize: function() {
        var me = this;
        me.callParent(arguments);
    }

});
/*
 * File: app/view/ConfigPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.view.ConfigPanel', {
    extend: 'Painometer.view.ui.ConfigPanel',
    alias: 'widget.configpanel',

    initialize: function() {
        var me = this;
        me.callParent(arguments);
    }

});
/*
 * File: app/store/ConfigStore.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.store.ConfigStore', {
    extend: 'Painometer.store.base.ConfigStore',

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({}, cfg)]);
    },

    onStoreLoad: function(store, records, successful, operation, eOpts) {
        //alert("Store: records " + Ext.isEmpty(records) + " suc:" + successful);

        var configDefault = Ext.create('Painometer.model.Config', {
            scale    : 0,
            language : 0,
            value    : 0
        });

        if (Ext.isEmpty(records)) {
            // no hi ha cap registre
            store.add(configDefault);
            store.sync();
        };
    }

});
/*
 * File: app/store/languageStore.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.store.languageStore', {
    extend: 'Painometer.store.base.languageStore',

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({}, cfg)]);
    }

});
/*
 * File: app/store/base/scaleTypesStore.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.store.base.scaleTypesStore', {
    extend: 'Ext.data.Store',
    requires: [
        'Painometer.model.ScaleTypes'
    ],

    config: {
        autoLoad: true,
        data: [
            {
                idScale: 0,
                label: 'FPS-R'
            },
            {
                idScale: 1,
                label: 'NRS-11'
            },
            {
                idScale: 2,
                label: 'CAS'
            },
            {
                idScale: 3,
                label: 'VAS'
            }
        ],
        model: 'Painometer.model.ScaleTypes',
        storeId: 'scaleTypesStoreId'
    }
});
/*
 * File: app/store/scaleTypesStore.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.store.scaleTypesStore', {
    extend: 'Painometer.store.base.scaleTypesStore',

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({}, cfg)]);
    }

});
/*
 * File: app/view/CASPanel.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.view.CASPanel', {
    extend: 'Painometer.view.ui.CASPanel',
    alias: 'widget.caspanel',

    initialize: function() {
        var me = this;
        me.callParent(arguments);
    }

});
/*
 * File: app/view/ui/MainContainer.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.view.ui.MainContainer', {
    extend: 'Ext.Container',
    requires: [
        'Painometer.view.FPSRPanel',
        'Painometer.view.NRS11Panel',
        'Painometer.view.CASPanel',
        'Painometer.view.VASPanel',
        'Painometer.view.ConfigPanel'
    ],

    config: {
        id: 'MainContainer',
        style: 'background-color:white;',
        ui: '',
        layout: {
            animation: 'cube',
            type: 'card'
        },
        defaults: {
            style: 'background-color:white;',
            
        },
        items: [
            {
                xtype: 'fpsrpanel',
                id: 'FpsrPanel'
            },
            {
                xtype: 'nrs11panel',
                id: 'Nrs11Panel'
            },
            {
                xtype: 'caspanel',
                id: 'casPanelIt',
                style: 'background-color:white;'
            },
            {
                xtype: 'vaspanel',
                id: 'vasPanelIt',
                style: 'background-color:white;'
            },
            {
                xtype: 'configpanel',
                id: 'configPanelIt'
            }
        ]
    }

});
/*
 * File: app/view/MainContainer.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.view.MainContainer', {
    extend: 'Painometer.view.ui.MainContainer',

    initialize: function() {
        var me = this;
        me.callParent(arguments);
    }

});


