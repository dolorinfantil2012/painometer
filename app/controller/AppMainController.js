/*
 * File: app/controller/AppMainController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.controller.AppMainController', {
    extend: 'Ext.app.Controller',

    config: {
    	configController : null,  
        orientation      : true,
        views: ['FPSRPanel', 'CASPanel', 'VASPanel'],
        refs: {
            MainContainer : '#MainContainer'
        },  
        control: {
            "fpsrpanel" : {activate: 'onLandscapShowActivate'},
            "CASPanel"  : {activate: 'onPortraitShowActivate'},
            "VASPanel"  : {activate: 'onPortraitShowActivate'},
        },
    },

    init: function() {
    	var app = this.getApplication();
    	
    	this.setConfigController(app.getController("Painometer.controller.ConfigController"));
    	
        this.orientationWarning = Ext.Viewport.add({
            xtype: 'OrientationInfo'
        });

        Ext.Viewport.on({
            scope: this,
            orientationchange: function(viewport, newOrientation) {
               	var scale = this.getConfigController().getScale();
               	
               	if (newOrientation == "portrait") {
               		if (scale == 0) {
               			this.hideOrientationInfo();	
               		} else if (scale == 2 || scale == 3) {
               			this.showOrientationInfo();
               		}
                } else {
                	this.setOrientation(true);
                	if (scale == 0) {
                		this.showOrientationInfo();
                	} else if (scale == 2 || scale == 3) {
                		this.hideOrientationInfo();
                	}
                }
            }
        });
    },
    
    onLandscapShowActivate: function(container, newActiveItem, oldActiveItem, options) {
    	if (this.isLandscape()) {
            this.showOrientationInfo(); 
        } else {
        	this.hideOrientationInfo();        	
        }
    },
    
    onPortraitShowActivate: function(container, newActiveItem, oldActiveItem, options) {
        if (this.isLandscape()) {
            this.hideOrientationInfo(); 
        } else {
        	this.showOrientationInfo();        	
        }
    },
    
    showOrientationInfo: function() {
    	var mainContainer = this.getMainContainer();
		var activePage = mainContainer.getActiveItem();
    	this.orientationWarning.showBy(activePage);
    },
    
	hideOrientationInfo: function() {
    	this.orientationWarning.hide();
    },

    isLandscape: function() {
        return Ext.Viewport.getOrientation() == "landscape"

    },

    isPortrait: function() {
        return Ext.Viewport.getOrientation() == "portrait"
    }

});