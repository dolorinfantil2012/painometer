/*
 * File: app/controller/ConfigController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('Painometer.controller.ConfigController', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Config'
        ],
        stores: [
            'ConfigStore'
        ],
        views: [
            'ConfigPanel'
        ],
        refs: {
            okConfig: '#okConfig',
            ValueView: 'Value',
            mainContainer: '#MainContainer',
            scaleSel: '#ScaleSel'
        },

        control: {
            "ConfigPanel": {
                activate: 'onConfigPanelActivate'
            },
            "okConfig": {
                tap: 'onConfigTap'
            }
        }
    },

    onConfigTap: function(button, e, options) {


        var me = this;
        var scale = me.getScaleSel().getValue();
        me.getMainContainer().setActiveItem(scale);
    },

    onConfigPanelActivate: function(container, newActiveItem, oldActiveItem, options) {


        var me = this;

        var view = me.getValueView();
        view.refresh();
    }

});