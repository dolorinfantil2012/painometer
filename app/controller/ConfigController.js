/*
 * File: app/controller/ConfigController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Painometer.controller.ConfigController', {
    extend: 'Ext.app.Controller',

    config: {
        models: [ 'Config'],
        views: ['ConfigPanel'],
        refs: {
            okConfig: '#okConfig',
            valueCont: '#ValueCont',
            mainContainer: '#MainContainer',
            infoBtn: '#infoBtn',
            creditsbtn: '#creditsbtn',
            configCard: '#ConfigCard',
            scaleField: '#scaleField',    // scale field of configuration
            resetField: '#resetField'     // reset field
        },
        control: {
            /*"#MainContainer": {
                activate: 'onContainerActivate',
                activeitemchange: 'onmcchange'
            },
            ,*/
            
            creditsbtn : { tap: 'creditsbtnTap' },
            configCard : { activate: 'onconfigCardActivate'},
           	infoBtn    : { tap: 'oninfoButtonTap'},
           	okConfig   : { tap: 'onOKTap'},
            // form
            scaleField : {change  : 'onChangeScale'},
            resetField : {change  : 'onChangeReset'}
        } ,
        // user variables
        configInstance : null, // instance of the current state
        scaleTypes     : null  // instance to the scale stores
    }, 

    init: function() {
    	var store = Ext.data.StoreManager.lookup('scaleTypesStoreId');
        var configModel = Ext.ModelMgr.getModel('Painometer.model.Config');
        var configDefault = Ext.create('Painometer.model.Config', {
            id       : 1 // other values are default
        });

        this.setConfigInstance(configDefault);
        this.setScaleTypes(store);

        configModel.load(1, {
            scope: this,
            failure: function(record) {
                this.getConfigInstance().save();
            }, 
            success: function (record) {
                this.getConfigInstance().set("value",    record.get("value"));
                this.getConfigInstance().set("language", record.get("language"));
                this.getConfigInstance().set("scale",    record.get("scale"));
                this.getConfigInstance().set("reset",    record.get("reset"));
            }
        });
    },

	// function that listen the ok tap to go back to show the scale
    onOKTap: function(button, e, options) {
        if (this.isReset()) {
            this.setValue(0);
        }
		this.getMainContainer().setActiveItem(this.getScale());
    },

    oninfoButtonTap: function(button, e, options) {
        this.getMainContainer().setActiveItem(4);
    },

    creditsbtnTap: function(button, e, options) {
        var me = this;
        var card = me.getConfigCard();
        var layout = card.getLayout();
        var inn = layout.getAnimation().getInAnimation();
        var out = layout.getAnimation().getOutAnimation();

        inn.setDirection("left");
        out.setDirection("left");
        card.setActiveItem(1);
    },

    onconfigCardActivate: function(container, newActiveItem, oldActiveItem, options) {
        var newValue = this.getConfigInstance().get('value');
        var record   = this.getScaleTypes().findRecord("idScale", this.getScale());
        var factor   = record.get('ratio');
        
        this.getValueCont().setData({'value' : newValue * factor});
    },
    
    
   /***************************************/
   /* change model                        */
   /***************************************/ 

    getValue: function() {
        return this.getConfigInstance().get('value');
    },

    setValue: function(newValue) {
        this.getConfigInstance().set('value', newValue);
        this.getConfigInstance().save();
    },

    getScale: function() {
        return this.getConfigInstance().get('scale');
    },

    setScale: function(newScale) {
        this.getConfigInstance().set('scale', newScale);
        this.getConfigInstance().save();
    },
    
    setReset: function(newValue) {
    	this.getConfigInstance().set('reset', newValue);
    	this.getConfigInstance().save();
    },
    
    isReset: function() {
    	return this.getConfigInstance().get('reset');
    },
    
    /*********************************************************/
    /* listeners of the form                                 */
    /*********************************************************/
   
    // listen the change of the reset field
    onChangeReset: function (slider, thumb, newValue, oldValue ) {
    	if (newValue != oldValue) {
    		this.setReset(newValue);
    	}
    },
    
    // listen the scale field
    onChangeScale: function (slider ) {
    	var newValue = slider.getRecord();
    	if (!Ext.isEmpty(newValue)) {
    		this.setScale(newValue.get("idScale"));
    	} 
    }

});